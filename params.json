{"name":"Laravel-debugbar","tagline":"Laravel 4 Debugbar (Integrates PHP Debug Bar)","body":"## Laravel 4 Debugbar\r\n[![Packagist License](https://poser.pugx.org/barryvdh/laravel-debugbar/license.png)](http://choosealicense.com/licenses/mit/)\r\n[![Latest Stable Version](https://poser.pugx.org/barryvdh/laravel-debugbar/version.png)](https://packagist.org/packages/barryvdh/laravel-debugbar)\r\n[![Total Downloads](https://poser.pugx.org/barryvdh/laravel-debugbar/d/total.png)](https://packagist.org/packages/barryvdh/laravel-debugbar)\r\n\r\nThis is a package to integrate [PHP Debug Bar](http://phpdebugbar.com/) with Laravel.\r\nIt includes a ServiceProvider to register the debugbar and attach it to the output. You can publish assets and configure it through Laravel.\r\nIt bootstraps some Collectors to work with Laravel and implements a couple custom DataCollectors, specific for Laravel.\r\nIt is configured to display Redirects and (jQuery) Ajax Requests. (Shown in a dropdown)\r\nRead [the documentation](http://phpdebugbar.com/docs/) for more configuration options.\r\n\r\n![Screenshot](https://cloud.githubusercontent.com/assets/973269/4270452/740c8c8c-3ccb-11e4-8d9a-5a9e64f19351.png)\r\n\r\nNote: Use the DebugBar only in development. It can slow the application down (because it has to gather data). So when experiencing slowness, try disabling some of the collectors.\r\n\r\nThis package includes some custom collectors:\r\n - QueryCollector: Show all queries, including binding + timing\r\n - RouteCollector: Show information about the current Route.\r\n - ViewCollector: Show the currently loaded views. (Optionally: display the shared data)\r\n - EventsCollector: Show all events\r\n - LaravelCollector: Show the Laravel version and Environment. (disabled by default)\r\n - SymfonyRequestCollector: replaces the RequestCollector with more information about the request/response\r\n - LogsCollector: Show the latest log entries from the storage logs. (disabled by default)\r\n - FilesCollector: Show the files that are included/required by PHP. (disabled by default)\r\n - ConfigCollector: Display the values from the config files. (disabled by default)\r\n\r\nBootstraps the following collectors for Laravel:\r\n - LogCollector: Show all Log messages\r\n - SwiftMailCollector and SwiftLogCollector for Mail\r\n\r\nAnd the default collectors:\r\n - PhpInfoCollector\r\n - MessagesCollector\r\n - TimeDataCollector (With Booting and Application timing)\r\n - MemoryCollector\r\n - ExceptionsCollector\r\n\r\nIt also provides a Facade interface for easy logging Messages, Exceptions and Time\r\n\r\n## Installation\r\n\r\nRequire this package with composer:\r\n\r\n```\r\ncomposer require barryvdh/laravel-debugbar\r\n```\r\n\r\nAfter updating composer, add the ServiceProvider to the providers array in app/config/app.php\r\n\r\n```\r\n'Barryvdh\\Debugbar\\ServiceProvider',\r\n```\r\n\r\nIf you want to use the facade to log messages, add this to your facades in app.php:\r\n\r\n```\r\n'Debugbar' => 'Barryvdh\\Debugbar\\Facade',\r\n```\r\n\r\n~~You need to publish the assets from this package.~~ Since 1.7, you don't need to publish the assets anymore.\r\n\r\nThe profiler is enabled by default, if you have app.debug=true. You can override that in the config files.\r\nYou can also set in your config if you want to include/exclude the vendor files also (FontAwesome, Highlight.js and jQuery). If you already use them in your site, set it to false.\r\nYou can also only display the js of css vendors, by setting it to 'js' or 'css'. (Highlight.js requires both css + js, so set to `true` for syntax highlighting)\r\n\r\n```\r\nphp artisan config:publish barryvdh/laravel-debugbar\r\n```\r\n\r\nYou can also disable/enable the loggers you want. You can also use the IoC container to add extra loggers. (`$app['debugbar']->addCollector(new MyDataCollector)`)\r\n\r\nYou can now add messages using the Facade (when added), using the PSR-3 levels (debug, info, notice, warning, error, critical, alert, emergency):\r\n\r\n```php\r\nDebugbar::info($object);\r\nDebugbar::error('Error!');\r\nDebugbar::warning('Watch out…');\r\nDebugbar::addMessage('Another message', 'mylabel');\r\n```\r\n\r\nAnd start/stop timing:\r\n\r\n```php\r\nDebugbar::startMeasure('render','Time for rendering');\r\nDebugbar::stopMeasure('render');\r\nDebugbar::addMeasure('now', LARAVEL_START, microtime(true));\r\nDebugbar::measure('My long operation', function() {\r\n    // Do something…\r\n});\r\n```\r\n\r\nOr log exceptions:\r\n\r\n```php\r\ntry {\r\n    throw new Exception('foobar');\r\n} catch (Exception $e) {\r\n    Debugbar::addException($e);\r\n}\r\n```\r\n\r\nThere are also helper functions available for the most common calls:\r\n\r\n```php\r\n// All arguments will be dumped as a debug message\r\ndebug($var1, $someString, $intValue, $object);\r\n\r\nstart_measure('render','Time for rendering');\r\nstop_measure('render');\r\nadd_measure('now', LARAVEL_START, microtime(true));\r\nmeasure('My long operation', function() {\r\n    // Do something…\r\n});\r\n```\r\n\r\nIf you want you can add your own DataCollectors, through the Container or the Facade:\r\n\r\n```php\r\nDebugbar::addCollector(new DebugBar\\DataCollector\\MessagesCollector('my_messages'));\r\n//Or via the App container:\r\n$debugbar = App::make('debugbar');\r\n$debugbar->addCollector(new DebugBar\\DataCollector\\MessagesCollector('my_messages'));\r\n```\r\n\r\nBy default, the Debugbar is injected just before `</body>`. If you want to inject the Debugbar yourself,\r\nset the config option 'inject' to false and use the renderer yourself and follow http://phpdebugbar.com/docs/rendering.html\r\n\r\n```php\r\n$renderer = Debugbar::getJavascriptRenderer();\r\n```\r\n\r\nNote: Not using the auto-inject, will disable the Request information, because that is added After the response.\r\nYou can add the default_request datacollector in the config as alternative.\r\n\r\n## Enabling/Disabling on run time\r\nYou can enable or disable the debugbar during run time.\r\n\r\n```php\r\n\\Debugbar::enable();\r\n\\Debugbar::disable();\r\n```\r\n\r\nNB. Once enabled, the collectors are added (and could produce extra overhead), so if you want to use the debugbar in production, disable in the config and only enable when needed.\r\n\r\n\r\n## Twig Integration\r\n\r\nLaravel Debugbar comes with two Twig Extensions. These are tested with [rcrowe/TwigBridge](https://github.com/rcrowe/TwigBridge) 0.6.x\r\n\r\nAdd the following extensions to your TwigBridge config/extensions.php (or register the extensions manually)\r\n\r\n```php\r\n'Barryvdh\\Debugbar\\Twig\\Extension\\Debug',\r\n'Barryvdh\\Debugbar\\Twig\\Extension\\Dump',\r\n'Barryvdh\\Debugbar\\Twig\\Extension\\Stopwatch',\r\n```\r\n\r\nThe Dump extension will replace the [dump function](http://twig.sensiolabs.org/doc/functions/dump.html) to output variables using the DataFormatter. The Debug extension adds a `debug()` function which passes variables to the Message Collector,\r\ninstead of showing it directly in the template. It dumps the arguments, or when empty; all context variables.\r\n\r\n```\r\n{{ debug() }}\r\n{{ debug(user, categories) }}\r\n```\r\n\r\nThe Stopwatch extension adds a [stopwatch tag](http://symfony.com/blog/new-in-symfony-2-4-a-stopwatch-tag-for-twig)  similar to the one in Symfony/Silex Twigbridge.\r\n\r\n```\r\n{% stopwatch \"foo\" %}\r\n    …some things that gets timed\r\n{% endstopwatch %}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}